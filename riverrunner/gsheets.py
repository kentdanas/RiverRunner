from googleapiclient.discovery import build
from httplib2 import Http
import json
import requests
from oauth2client import service_account
import pandas as pd
import riverrunner.models as models
import riverrunner.settings as settings

SCOPES = 'https://www.googleapis.com/auth/spreadsheets'


class Sheets:
    def __init__(self, sheet_id):
        """ interface to Google Sheets API
        This class provides a simple interface to get and put data to Google Sheets

        :param sheet_id: string, The sheet id as generated by Google. This can be found in the sheet's url
        """
        self.__runs = None
        self.__sheet_id = sheet_id
        self.__stations = None

        # setup the oauth connection
        credentials = service_account.ServiceAccountCredentials.from_json_keyfile_name(
            settings.SHEETS_CRED_FILE,
            scopes=SCOPES
        )
        self.__gsheets = build('sheets', 'v4', credentials=credentials)

    def get_all_runs(self, force=False):
        """ return all river runs
        this function will only make the http request under two conditions:
            one: the request has not been cached by the instantiated class
            two: the request is forced

        :param force: (bool) defaults to False. set to true to force the http request and update the cached values
        :return: (DataFrame) containing all run information
        """
        if self.__runs is not None and not force:
            return self.__runs

        result = self.__gsheets.spreadsheets().values().get(
            spreadsheetId=self.__sheet_id,
            range='runs'
        ).execute()

        values = result.get('values', [])
        if len(values) > 0:
            df = pd.DataFrame(values)
            df.columns = df.iloc[0, :]
            df = df.iloc[1:, :]

            self.__runs = df
            return df
        else:
            return None

    def get_all_stations(self, force=False):
        """ return all weather stations
        this function will only make the http request if the stations haven't already been cached or is forced

        :param force: (bool) set to true to force the http request and update the cached values
        :return: (DataFrame) containing all weather stations
        """
        if self.__runs is not None and not force:
            return self.__stations

        result = self.__gsheets.spreadsheets().values().get(
            spreadsheetId=self.__sheet_id,
            range='stations'
        ).execute()

        values = result.get('values', [])
        if len(values) > 0:
            df = pd.DataFrame(values)
            df.columns = df.iloc[0, :]
            df = df.iloc[1:, :]

            self.__stations = df
            return df
        else:
            return None

    def put_new_predictions(self, predictions):
        """ insert new predictions to Google Sheets
        function will clear existing predictions and insert the provided

        :param predictions: list of class Prediction elements
        :return: int: number of items inserted
        """
        self.clear_predictions()

        body = {
            'range': 'predictions!A1:E%s' % len(predictions),
            'values': [p.as_gvalue() for p in predictions if isinstance(p, models.Prediction)]
        }

        result = self.__gsheets.spreadsheets().values().append(
            spreadsheetId=self.__sheet_id,
            valueInputOption='USER_ENTERED',
            insertDataOption='OVERWRITE',
            range=body['range'],
            body=body
        ).execute()

        return result['updates']['updatedRows']

    def clear_predictions(self):
        """ clears all rows from the prediction sheet

        :return: boolean, success/fail
        """
        range_ = 'predictions!A:E'

        self.__gsheets.spreadsheets().values().clear(
            spreadsheetId=self.__sheet_id,
            range=range_
        ).execute()

        return True
